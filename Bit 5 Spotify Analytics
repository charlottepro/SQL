--For this project I downloaded a Spotify table from Kaggle.
--Then I created a table in SQLite to insert my data into.
--Finally, I compiled several querries and preformed analytics on the data using SQL.

--Table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

--Then I added the Spotify data .cvs into the table.

--I surveyed the table with the following SQL querries.


 SELECT *
FROM BIT_DB.Spotifydata;


--Most popular on Spotify by artist and track.
SELECT artist_name AS artist, track_name AS track, popularity 
FROM BIT_DB.Spotifydata
WHERE popularity >= 90
ORDER BY popularity DESC;


--Average populatity danceability, and energy by artist and track.
SELECT artist_name AS artist, track_name AS track, avg(popularity), avg(danceability), avg(energy)
FROM BIT_DB.Spotifydata
GROUP BY artist, track;


--Which is the slowest and longest song?
SELECT artist_name AS artist, track_name AS track, tempo, duration_ms AS duration
FROM BIT_DB.Spotifydata
WHERE duration > 200000 AND tempo < 100  LIMIT 1 ; 


--Which is the fastest and shortest song?
SELECT artist_name AS artist, track_name AS track, tempo, duration_ms AS duration
FROM BIT_DB.Spotifydata
ORDER BY duration < 140000 AND tempo > 130 LIMIT 1;


--Common table expressions

WITH popularity_average_CTE AS (
SELECT s.artist_name, AVG(s.popularity) AS average_popularity
FROM SpotifyData s
GROUP BY s.artist_name
)

SELECT artist_name, average_popularity, 'Top Star' AS tag
FROM popularity_average_CTE 
WHERE average_popularity >= 90;

